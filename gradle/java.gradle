import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.ConcurrentMap

allprojects {
    pluginManager.withPlugin('java') {
        apply plugin: 'name.remal.insert-null-checks'

        sourceCompatibility = JavaVersion.VERSION_1_8.toString()
        targetCompatibility = sourceCompatibility.toString()

        repositories {
            mavenCentral()
            gradlePluginPortal()

            maven {
                name = 'Gradle API'
                url = 'https://maven.pkg.github.com/remal-gradle-api/packages'
                credentials {
                    username = System.getenv('GITHUB_ACTOR') ?: 'x-access-token'
                    password = System.getenv('READ_PACKAGES_GITHUB_TOKEN') ?:
                        'g' + 'hp_xmGQ2dHvCiK685' + 'qNEFuA3IAvv6Vfg62WM1hG'
                }
            }
        }
        repositories.all {
            content {
                if (name == 'Gradle API') {
                    includeGroup('name.remal.gradle-api')
                } else {
                    excludeGroup('name.remal.gradle-api')
                }
            }
        }

        configurations.named('projectDependencyConstraints') { Configuration conf ->
            String mockitoVersion = '3.9.0'

            conf.dependencies.addAll(
                [
                    'org.junit:junit-bom:5.7.1',
                ].collect { project.dependencies.platform(it) }
            )

            conf.dependencyConstraints.addAll(
                [
                    // Static analysis
                    'com.google.code.findbugs:jsr305:3.0.2',
                    'org.jetbrains:annotations:20.1.0',

                    // Compile
                    "name.remal.gradle-api:local-groovy:${property('gradle-api.version')}",
                    "name.remal.gradle-api:gradle-api:${property('gradle-api.version')}",

                    // Test
                    "name.remal.gradle-api:gradle-test-kit:${property('gradle-api.version')}",
                    "org.mockito:mockito-core:$mockitoVersion",
                    "org.mockito:mockito-inline:$mockitoVersion",
                    "org.mockito:mockito-junit-jupiter:$mockitoVersion",
                ].collect { project.dependencies.constraints.create(it) }
            )
        }

        dependencies {
            compileOnly 'com.google.code.findbugs:jsr305'
            compileOnly 'org.jetbrains:annotations'

            testImplementation 'org.junit.jupiter:junit-jupiter-api'
            testImplementation 'org.junit.jupiter:junit-jupiter-params'
            testImplementation 'org.mockito:mockito-junit-jupiter'
            testImplementation 'org.mockito:mockito-inline'
            testImplementation 'com.google.code.findbugs:jsr305'
            testImplementation 'org.jetbrains:annotations'

            testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
        }


        tasks.withType(JavaCompile) {
            options.with {
                it.fork = false
                it.encoding = 'UTF-8'
                it.deprecation = true
                it.compilerArgs.addAll(
                    [
                        '-parameters',
                        '-Werror',
                        '-Xlint:all',
                        '-Xlint:-rawtypes',
                        '-Xlint:-serial',
                        '-Xlint:-processing',
                    ]
                )
            }
        }

        tasks.matching { it instanceof JavaForkOptions }.all {
            List<String> jvmArgs = it.jvmArgs
            jvmArgs += '--illegal-access=deny'
            it.jvmArgs = jvmArgs
        }

        tasks.withType(Test) {
            useJUnitPlatform()

            testLogging {
                events('FAILED')
            }

            Set<Object> testsWithStdErr = Collections.newSetFromMap(new ConcurrentHashMap<>())
            ConcurrentMap<Object, List<String>> testsMessages = new ConcurrentHashMap<>()
            onOutput { TestDescriptor descr, TestOutputEvent event ->
                if (event.destination.name() == 'StdErr') {
                    testsWithStdErr.add(descr.id)
                }

                List<String> testMessages = testsMessages.computeIfAbsent(descr.id, { new ArrayList<>() })
                testMessages.add(event.getMessage())
            }
            afterTest { TestDescriptor descr, TestResult result ->
                if (result.resultType.name() == 'FAILURE' || testsWithStdErr.contains(descr.id)) {
                    List<String> testMessages = testsMessages.get(descr.id)
                    if (testMessages != null) {
                        println()
                        println("Output of $descr.className > $descr.displayName:")
                        testMessages.forEach { print(" > $it") }
                    }
                }
            }
        }
    }

    pluginManager.withPlugin('java-gradle-plugin') {
        afterEvaluate {
            configurations.all { Configuration conf ->
                conf.dependencies.removeIf {
                    it instanceof SelfResolvingDependency && it.files.toString() != 'file collection'
                }
            }
        }

        dependencies {
            compileOnly 'name.remal.gradle-api:gradle-api'
            testImplementation 'name.remal.gradle-api:gradle-api'
            testImplementation 'name.remal.gradle-api:gradle-test-kit'
        }
    }
}
