/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

buildscript {
    String rootGroupId = project.ext.rootGroupId = "name.remal.gradle-plugins.${rootProject.name}"
    String rootArtifactId = project.ext.rootArtifactId = rootProject.name
    String rootSnapshotVersion = project.ext.rootSnapshotVersion = '5-SNAPSHOT'
    dependencies {
        //classpath("$rootGroupId:$rootArtifactId:$rootSnapshotVersion") { version { strictly(rootSnapshotVersion) } }
        classpath 'name.remal.gradle-plugins.toolkit:build-logic:0.72.14'
    }
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

allprojects {
    group = project.rootGroupId
    version = project.rootSnapshotVersion
}

apply plugin: 'name.remal.toolkit.build-logic'

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

apply plugin: 'java-gradle-plugin'
apply plugin: 'name.remal.generate-sources'

configurations.optional.extendsFrom(configurations.correspondingKotlinPlugin)

dependencies {
}

gradlePlugin {
    plugins {
        'name.remal.test-source-sets' {
            id = 'name.remal.test-source-sets'
            implementationClass = 'name.remal.gradle_plugins.test_source_sets.TestSourceSetsPlugin'
            displayName = 'A plugin that creates `testSourceSets` extension'
            description = property('repository-description')
        }
        'name.remal.integration-tests' {
            id = 'name.remal.integration-tests'
            implementationClass = 'name.remal.gradle_plugins.test_source_sets.IntegrationTestsPlugin'
            displayName = 'A plugin that creates `integrationTest` source set for integration tests'
            description = displayName
        }
    }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

generateSources.forMainSourceSet.java {
    String repositoryHtmlUrl = project.ext['repository-html-url']
    inputs.property('repository-html-url', repositoryHtmlUrl)
    classFile(project.calculateBaseJavaPackage(), 'DocUtils') {
        addStaticImport("lombok.AccessLevel", "PRIVATE")
        addImport("lombok.NoArgsConstructor")

        line("@NoArgsConstructor(access = PRIVATE)")
        block("abstract class ${simpleName}") {
            line("public static final String PLUGIN_REPOSITORY_HTML_URL = \"${escapeString(repositoryHtmlUrl)}\";")
        }
    }
}
